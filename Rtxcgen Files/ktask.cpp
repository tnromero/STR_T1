// ktask.cpp - RTXC Quadros Version 1.0.0 Task definitions

// This file was generated on 11/05/2013 13:59:28 -- RTXCgen v1.12 Build 411

/*
 *    RTXC Quadros Version 1.0.0
 *    Copyright (c) 1999-2013
 *    Quadros Systems, Inc.
 *    ALL RIGHTS RESERVED
 *
 *    THE INFORMATION HEREIN IS CONFIDENTIAL AND PROPRIETARY.
 *    UNAUTHORIZED DISCLOSURE OR DISTRIBUTION IS PROHIBITED.
*/

/*
 *            ** WARNING **
 *
 *    Do **NOT** Edit this File by Hand
 *
 *    It was computer-generated by RTXCgen from
 *    an Application specification file.
*/

//     Project Name: Exemplo-modelo
//         CPU Name: CPU name
// Application Name: Application name

#include "rtxcapi.h"

#ifdef HAS_Tasks // {

#include "ktask.h"

// Begin - Revision Information, Top
// End - Revision Information, Top


#ifdef HAS_TaskStaticNames // {
// Static Object Name Array
static const char taskname[1 + NTASKS][TASK_NAMMAX + 1] =
{
    ""   // 0 - Not Used
   ,"CONOTASK"   // 1 - 
   ,"CONITASK"   // 2 - 
   ,"Principal"   // 3 - 
   ,"Tabuleiro"   // 4 - 
   ,"Player1"   // 5 - 
   ,"Player2"   // 6 - 
   ,"Bola"   // 7 - 
   ,"Mov_Bola"   // 8 - 
};
#endif // } HAS_TaskStaticNames

// Class Properties
extern const KCLASSPROP taskclassprop =
{
   ATTR_STATISTICS |
   ATTR_STATIC_NAMES | ATTR_DYNAMICS | ATTR_SEMAPHORES | ATTR_TICKSLICE | ATTR_ARGUMENTS,
   NTASKS,
   DNTASKS,
   sizeof(TCB),
   ((1 + NTASKS + DNTASKS) * sizeof(TCB)) + (DNTASKS * sizeof(NAMELIST)),

#ifdef HAS_TaskStaticNames // {
   TASK_NAMMAX,
   &taskname[0][0]

#else
   0,
   (const char *)0
#endif // } HAS_TaskStaticNames

};

// Begin - User Include Information
// End - User Include Information

// Task Information

#define STKSZ1 256 // 1 CONOTASK - 
static STK_ALIGNTYPE stack1[STKSZ1 / SIZEOF_STK_ALIGNTYPE];
extern void task_CONOTASK(void);

#define STKSZ2 256 // 2 CONITASK - 
static STK_ALIGNTYPE stack2[STKSZ2 / SIZEOF_STK_ALIGNTYPE];
extern void task_CONITASK(void);

#define STKSZ3 512 // 3 Principal - 
static STK_ALIGNTYPE stack3[STKSZ3 / SIZEOF_STK_ALIGNTYPE];
extern void task_Principal(void);

#define STKSZ4 512 // 4 Tabuleiro - 
static STK_ALIGNTYPE stack4[STKSZ4 / SIZEOF_STK_ALIGNTYPE];
extern void task_Tabuleiro(void);

#define STKSZ5 512 // 5 Player1 - 
static STK_ALIGNTYPE stack5[STKSZ5 / SIZEOF_STK_ALIGNTYPE];
extern void task_Player1(void);

#define STKSZ6 512 // 6 Player2 - 
static STK_ALIGNTYPE stack6[STKSZ6 / SIZEOF_STK_ALIGNTYPE];
extern void task_Player2(void);

#define STKSZ7 512 // 7 Bola - 
static STK_ALIGNTYPE stack7[STKSZ7 / SIZEOF_STK_ALIGNTYPE];
extern void task_Bola(void);

#define STKSZ8 512 // 8 Mov_Bola - 
static STK_ALIGNTYPE stack8[STKSZ8 / SIZEOF_STK_ALIGNTYPE];
extern void task_Mov_Bola(void);


// Starting Order Task List
extern const TASK startls[] =
{
   CONITASK, // (3) 2 - 
   CONOTASK, // (4) 1 - 
   Principal, // (10) 3 - 
   Tabuleiro, // (10) 4 - 
   Player1, // (10) 5 - 
   Player2, // (10) 6 - 
   Bola, // (10) 7 - 
   Mov_Bola, // (10) 8 - 
   0 // Null-terminated Task List
};

// Object Properties
extern const TASKPROP taskprop[1 + NTASKS] =
{
    {  (void (*)(void))0, (char *)0, 0, 0 } // 0 - Not Used
   ,{  task_CONOTASK, (char *)stack1, STKSZ1, 4 } // 1 CONOTASK - 
   ,{  task_CONITASK, (char *)stack2, STKSZ2, 3 } // 2 CONITASK - 
   ,{  task_Principal, (char *)stack3, STKSZ3, 10 } // 3 Principal - 
   ,{  task_Tabuleiro, (char *)stack4, STKSZ4, 9 } // 4 Tabuleiro - 
   ,{  task_Player1, (char *)stack5, STKSZ5, 9 } // 5 Player1 - 
   ,{  task_Player2, (char *)stack6, STKSZ6, 9 } // 6 Player2 - 
   ,{  task_Bola, (char *)stack7, STKSZ7, 9 } // 7 Bola - 
   ,{  task_Mov_Bola, (char *)stack8, STKSZ8, 10 } // 8 Mov_Bola - 
};

// Begin - Revision Information, Bottom
// End - Revision Information, Bottom

#endif // } HAS_Tasks

// end of file - ktask.cpp
