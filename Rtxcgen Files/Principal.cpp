// Principal.cpp - Generated by VisualRTXC

#include "kcounter.h"
#include "kmutx.h"
#include "ktask.h"
#include "kthread.h"
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include "rtxcapi.h"
#include "kproject.h"
#include "objetos.h"
#include "graphics.h"
#include "Util.h"

// Variaveis Globais
tabuleiro t;
quadrilatero player1;
quadrilatero player2;
circulo bola;
bool quit = false;
int scoreP1 = 0;
int scoreP2 = 0;



void task_Principal(void);

void task_Principal(void)
{
	
	int key=0;
	//quadrado q;
	int GraphDriver = DETECT,GraphMode = 0;
	int i=0; 
	
	
	initgraph(&GraphDriver, &GraphMode, "", 607, 600);
	
	/*q.filltype=SOLID_FILL;
	q.fillcolor=3;
	q.x=300;
	q.y=300;
	q.width=100;
	q.height=100;		 */
	
	while(!quit)
	{
		// Verifica se ocorreu um evento
		if(kbhit())
		{
			key = getch();
			// w 87 e 119
			if(GetKeyState(87) & 0x8000)
			{
				KS_TestMutxW(M_P1);
				if(player1.v1.y-INC_PLAYER>TOPO)
				{
					player1.v1.y-=INC_PLAYER;
					player1.v2.y-=INC_PLAYER;
				}
				else
				{
					player1.v2.y-=(player1.v1.y-TOPO-1);
					player1.v1.y-=(player1.v1.y-TOPO-1);
				}
				KS_ReleaseMutx(M_P1);
			}
			// s 83 e 115
			if(GetKeyState(83) & 0x8000)
			{
				KS_TestMutxW(M_P1);
				if(player1.v2.y+INC_PLAYER<INFERIOR)
				{
					player1.v1.y+=INC_PLAYER;
					player1.v2.y+=INC_PLAYER;
				}
				else
				{
					player1.v1.y+=(INFERIOR - player1.v2.y -1);
					player1.v2.y+=(INFERIOR - player1.v2.y -1);
				}
				KS_ReleaseMutx(M_P1);
			}
			// i 73 e 105
			if(GetKeyState(73) & 0x8000)
			{
				KS_TestMutxW(M_P2);
				if(player2.v1.y-INC_PLAYER>TOPO)
				{
					player2.v1.y-=INC_PLAYER;
					player2.v2.y-=INC_PLAYER;
				}
				else
				{
					player2.v2.y-=(player2.v1.y-TOPO-1);
					player2.v1.y-=(player2.v1.y-TOPO-1);
				}
				KS_ReleaseMutx(M_P2);
			}
			// k 75 e 107
			if(GetKeyState(75) & 0x8000)
			{
				KS_TestMutxW(M_P2);
				if(player2.v2.y+INC_PLAYER<INFERIOR)
				{
					player2.v1.y+=INC_PLAYER;
					player2.v2.y+=INC_PLAYER;
				}
				else
				{
					player2.v1.y+=(INFERIOR - player2.v2.y -1);
					player2.v2.y+=(INFERIOR - player2.v2.y -1);
				}
				KS_ReleaseMutx(M_P2);
			}
			// q 81 e 113
			if(GetKeyState(81) & 0x8000)
			{
				quit=true;
			}
		}
		KS_ScheduleThread(DISPLAY);
		KS_SleepTask(SYSTIMER, (TICKS)100/CLKTICK);
	}
	closegraph();
	KS_TerminateTask(SELFTASK);
}
